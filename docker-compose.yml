services:
    backend:
        build:
            context: ./backend
            dockerfile: dockerfile.backend
        ports:
            - "${PORT_BACKEND}:${PORT_BACKEND}"
        environment:
            - NODE_ENV=${NODE_ENV}
            - DB_USER=${DB_USER}
            - DB_HOST=${DB_HOST}
            - DB_NAME=${DB_NAME}
            - DB_PASSWORD=${DB_PASSWORD}
            - DB_PORT=${DB_PORT}
            - JWT_SECRET=${JWT_SECRET}
            - PORT_BACKEND=${PORT_BACKEND}
            - ORIGIN_URL=${ORIGIN_URL}
            - SERVER_URL=${SERVER_URL}
            - EMAIL=${EMAIL}
            - MAILJET_API_KEY=${MAILJET_API_KEY}
            - MAILJET_SECRET_KEY=${MAILJET_SECRET_KEY}
        depends_on:
            - db
        restart: unless-stopped

    frontend:
        build:
            context: ./frontend
            dockerfile: dockerfile.frontend
            args:
                - VITE_API_URL=${VITE_API_URL}
        ports:
            - "${PORT_FRONTEND}:${PORT_FRONTEND}"
        environment:
            - NODE_ENV=${NODE_ENV}
            - VITE_API_URL=${VITE_API_URL}
        depends_on:
            - backend
        restart: unless-stopped

    db:
        image: postgres:14-alpine
        environment:
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=${DB_NAME}
        ports:
            - "5433:5432"
        volumes:
            - pgdata:/var/lib/postgresql/data
            - ./database_script.sql:/docker-entrypoint-initdb.d/init.sql
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

volumes:
    pgdata:
